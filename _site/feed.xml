<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://127.0.0.1:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://127.0.0.1:4000/" rel="alternate" type="text/html" /><updated>2024-07-28T18:55:46-03:00</updated><id>http://127.0.0.1:4000/feed.xml</id><title type="html">Blog do Aure</title><author><name>Aureliano Guedes</name></author><entry><title type="html">Data Science Overview</title><link href="http://127.0.0.1:4000/DataScience/" rel="alternate" type="text/html" title="Data Science Overview" /><published>2024-07-28T07:00:00-03:00</published><updated>2024-07-28T07:00:00-03:00</updated><id>http://127.0.0.1:4000/data-science</id><content type="html" xml:base="http://127.0.0.1:4000/DataScience/"><![CDATA[]]></content><author><name>Aureliano Guedes</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Decision Tree</title><link href="http://127.0.0.1:4000/DataScience/TreeBasedModels/DecisionTree/" rel="alternate" type="text/html" title="Decision Tree" /><published>2024-07-28T07:00:00-03:00</published><updated>2024-07-28T07:00:00-03:00</updated><id>http://127.0.0.1:4000/DataScience/TreeBasedModels/decision-tree</id><content type="html" xml:base="http://127.0.0.1:4000/DataScience/TreeBasedModels/DecisionTree/"><![CDATA[]]></content><author><name>Aureliano Guedes</name></author><category term="data-science" /><category term="tree-based-models" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Random Forest</title><link href="http://127.0.0.1:4000/DataScience/TreeBasedModels/RandomForest/" rel="alternate" type="text/html" title="Random Forest" /><published>2024-07-28T07:00:00-03:00</published><updated>2024-07-28T07:00:00-03:00</updated><id>http://127.0.0.1:4000/DataScience/TreeBasedModels/random-forest</id><content type="html" xml:base="http://127.0.0.1:4000/DataScience/TreeBasedModels/RandomForest/"><![CDATA[]]></content><author><name>Aureliano Guedes</name></author><category term="data-science" /><category term="tree-based-models" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Tree Based Models</title><link href="http://127.0.0.1:4000/DataScience/TreeBasedModels/" rel="alternate" type="text/html" title="Tree Based Models" /><published>2024-07-28T07:00:00-03:00</published><updated>2024-07-28T07:00:00-03:00</updated><id>http://127.0.0.1:4000/DataScience/tree-based-models</id><content type="html" xml:base="http://127.0.0.1:4000/DataScience/TreeBasedModels/"><![CDATA[]]></content><author><name>Aureliano Guedes</name></author><category term="data-science" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Neural Network Models Overview</title><link href="http://127.0.0.1:4000/DataScience/NeuralNetworkModels/" rel="alternate" type="text/html" title="Neural Network Models Overview" /><published>2024-07-28T00:00:00-03:00</published><updated>2024-07-28T00:00:00-03:00</updated><id>http://127.0.0.1:4000/DataScience/neural-network-models</id><content type="html" xml:base="http://127.0.0.1:4000/DataScience/NeuralNetworkModels/"><![CDATA[]]></content><author><name>Aureliano Guedes</name></author><category term="data-science" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Rag Postgres Tutorial</title><link href="http://127.0.0.1:4000/rag-postgres-tutorial/" rel="alternate" type="text/html" title="Rag Postgres Tutorial" /><published>2024-07-28T00:00:00-03:00</published><updated>2024-07-28T00:00:00-03:00</updated><id>http://127.0.0.1:4000/rag-postgres-tutorial</id><content type="html" xml:base="http://127.0.0.1:4000/rag-postgres-tutorial/"><![CDATA[<h3 id="tutorial-creating-a-database-for-rag-using-pdfs-and-postgresql">Tutorial: Creating a Database for RAG using PDFs and PostgreSQL</h3>

<h2 id="introduction">Introduction</h2>
<p>In this tutorial, we will create a database for Retrieve and Generate (RAG) applications using PDFs and PostgreSQL. We will use the OpenAI API to generate text embeddings, which will be stored in a PostgreSQL database to facilitate search and information retrieval.</p>

<p>Before we begin, ensure you have <a href="#">PostgreSQL installed and configured</a> on your machine. If not, please follow this <a href="#">installation guide</a> and <a href="#">create a new database</a> for this tutorial.</p>

<h2 id="prerequisites">Prerequisites</h2>
<ul>
  <li>Python installed on your machine</li>
  <li>PostgreSQL installed and configured</li>
  <li>Access to the OpenAI API</li>
  <li>Required Python libraries:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">psycopg2</code></li>
      <li><code class="language-plaintext highlighter-rouge">openai</code></li>
      <li><code class="language-plaintext highlighter-rouge">PyPDF2</code></li>
      <li><code class="language-plaintext highlighter-rouge">langchain</code></li>
    </ul>
  </li>
</ul>

<h2 id="step-1-environment-setup">Step 1: Environment Setup</h2>
<ol>
  <li><strong>Install the necessary libraries</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>psycopg2 openai PyPDF2 langchain
</code></pre></div>    </div>
  </li>
  <li><strong>Set up the environment variable for the OpenAI API</strong>:
Ensure that the <code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> environment variable is set with your OpenAI API key.</li>
</ol>

<h2 id="step-2-extracting-text-from-pdfs">Step 2: Extracting Text from PDFs</h2>
<p>Create a function to extract text from PDF files using <code class="language-plaintext highlighter-rouge">PyPDF2</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">PyPDF2</span> <span class="kn">import</span> <span class="n">PdfReader</span>

<span class="k">def</span> <span class="nf">extract_text_from_pdf</span><span class="p">(</span><span class="n">pdf_path</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="nc">PdfReader</span><span class="p">(</span><span class="n">pdf_path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">.</span><span class="n">pages</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">+=</span> <span class="n">page</span><span class="p">.</span><span class="nf">extract_text</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">text</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error extracting text from PDF </span><span class="si">{</span><span class="n">pdf_path</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div>

<h2 id="step-3-generating-embeddings-with-openai-api">Step 3: Generating Embeddings with OpenAI API</h2>
<p>Create a class to generate embeddings using the OpenAI API. The method <code class="language-plaintext highlighter-rouge">embed_documents</code> allows setting the model, with a default of “text-embedding-3-large”:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">openai</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="k">class</span> <span class="nc">OpenAIEmbeddings</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">embed_documents</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">texts</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">text-embedding-3-large</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">valid_texts</span> <span class="o">=</span> <span class="p">[</span><span class="n">text</span> <span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">valid_texts</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No valid texts to generate embeddings.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">[]</span>

        <span class="n">all_embeddings</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">2048</span>  <span class="c1"># Token limit per batch
</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">valid_texts</span><span class="p">),</span> <span class="n">batch_size</span><span class="p">):</span>
            <span class="n">batch_texts</span> <span class="o">=</span> <span class="n">valid_texts</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">response</span> <span class="o">=</span> <span class="n">openai</span><span class="p">.</span><span class="n">Embedding</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                    <span class="nb">input</span><span class="o">=</span><span class="n">batch_texts</span><span class="p">,</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
                    <span class="n">max_tokens</span><span class="o">=</span><span class="n">batch_size</span>
                <span class="p">)</span>
                <span class="n">embeddings</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">embedding</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">]]</span>
                <span class="n">all_embeddings</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">embeddings</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">openai</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">RateLimitError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Rate limit error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">. Waiting 60 seconds...</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">openai</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">InvalidRequestError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error generating embeddings: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">continue</span>

        <span class="k">return</span> <span class="n">all_embeddings</span>
</code></pre></div></div>

<p><strong>Note:</strong> You can specify a different model by changing the <code class="language-plaintext highlighter-rouge">model</code> parameter when calling the <code class="language-plaintext highlighter-rouge">embed_documents</code> method. Choose the model based on your specific needs, such as the size of the embedding vectors, computational efficiency, or the type of data being processed.</p>

<h2 id="step-4-postgresql-database-setup">Step 4: PostgreSQL Database Setup</h2>
<ol>
  <li><strong>Configure the database connection details</strong>:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">db_config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">dbname</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">rag_test</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">postgres</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">12345</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">host</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">localhost</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">port</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">5432</span><span class="sh">'</span>
<span class="p">}</span>

<span class="n">connection_string</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">postgresql://</span><span class="si">{</span><span class="n">db_config</span><span class="p">[</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">db_config</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">@</span><span class="si">{</span><span class="n">db_config</span><span class="p">[</span><span class="sh">'</span><span class="s">host</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">db_config</span><span class="p">[</span><span class="sh">'</span><span class="s">port</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">db_config</span><span class="p">[</span><span class="sh">'</span><span class="s">dbname</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>

<ol>
  <li><strong>Connect to the PostgreSQL database and clear tables</strong>:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">psycopg2</span>

<span class="n">connection</span> <span class="o">=</span> <span class="n">psycopg2</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">connection_string</span><span class="p">)</span>
<span class="n">cursor</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">clear_tables</span><span class="p">():</span>
    <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"</span><span class="s">DROP TABLE IF EXISTS langchain_pg_embedding CASCADE;</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"</span><span class="s">DROP TABLE IF EXISTS langchain_pg_collection CASCADE;</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">connection</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

<span class="nf">clear_tables</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-5-processing-and-storing-pdfs">Step 5: Processing and Storing PDFs</h2>
<ol>
  <li><strong>Function to process PDFs and store them in the database</strong>:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">langchain.vectorstores.pgembedding</span> <span class="kn">import</span> <span class="n">PGEmbedding</span>
<span class="kn">from</span> <span class="n">langchain.docstore.document</span> <span class="kn">import</span> <span class="n">Document</span>
<span class="kn">from</span> <span class="n">langchain.text_splitter</span> <span class="kn">import</span> <span class="n">RecursiveCharacterTextSplitter</span>

<span class="k">def</span> <span class="nf">process_and_store_pdfs</span><span class="p">(</span><span class="n">directory</span><span class="p">):</span>
    <span class="n">documents</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">directory</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">The directory </span><span class="si">{</span><span class="n">directory</span><span class="si">}</span><span class="s"> does not exist.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">directory</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">.pdf</span><span class="sh">'</span><span class="p">):</span>
            <span class="n">pdf_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Processing </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>

            <span class="n">content</span> <span class="o">=</span> <span class="nf">extract_text_from_pdf</span><span class="p">(</span><span class="n">pdf_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">content</span><span class="p">:</span>
                <span class="n">text_splitter</span> <span class="o">=</span> <span class="nc">RecursiveCharacterTextSplitter</span><span class="p">(</span><span class="n">chunk_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">chunk_overlap</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
                <span class="n">chunks</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="nf">split_text</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>

                <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">chunks</span><span class="p">:</span>
                    <span class="n">documents</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Document</span><span class="p">(</span>
                        <span class="n">page_content</span><span class="o">=</span><span class="n">chunk</span><span class="p">,</span>
                        <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="n">filename</span><span class="p">}</span>
                    <span class="p">))</span>

    <span class="k">if</span> <span class="n">documents</span><span class="p">:</span>
        <span class="n">embedding_function</span> <span class="o">=</span> <span class="nc">OpenAIEmbeddings</span><span class="p">()</span>
        <span class="n">vector_store</span> <span class="o">=</span> <span class="nc">PGEmbedding</span><span class="p">(</span>
            <span class="n">connection_string</span><span class="o">=</span><span class="n">connection_string</span><span class="p">,</span>
            <span class="n">embedding_function</span><span class="o">=</span><span class="n">embedding_function</span>
        <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">vector_store</span><span class="p">.</span><span class="nf">add_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error inserting documents into the database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li><strong>Process and store all PDFs in the directory</strong>:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pdf_directory</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/path/to/your/pdfs</span><span class="sh">'</span>
<span class="nf">process_and_store_pdfs</span><span class="p">(</span><span class="n">pdf_directory</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-6-data-insertion-verification">Step 6: Data Insertion Verification</h2>
<p>Verify that the data was inserted correctly:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">psycopg2</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">connection_string</span><span class="p">)</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cursor</span><span class="p">:</span>
            <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"</span><span class="s">SELECT COUNT(*) FROM langchain_pg_embedding;</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">count</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="nf">fetchone</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total number of documents in the </span><span class="sh">'</span><span class="s">langchain_pg_embedding</span><span class="sh">'</span><span class="s"> table: </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error checking the </span><span class="sh">'</span><span class="s">langchain_pg_embedding</span><span class="sh">'</span><span class="s"> table: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">connection</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>
<p>This is a basic tutorial for setting up a system to extract text from PDFs, generate embeddings using the OpenAI API, and store these data in a PostgreSQL database. There are numerous enhancements you can make to improve this system, such as improving text extraction from PDFs, refining the text boundaries per chunk, and many others.</p>]]></content><author><name>Aureliano Guedes</name></author><summary type="html"><![CDATA[Tutorial: Creating a Database for RAG using PDFs and PostgreSQL]]></summary></entry></feed>